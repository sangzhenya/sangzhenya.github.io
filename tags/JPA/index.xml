<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JPA on 新月的博客</title>
    <link>http://programya.com/tags/JPA/</link>
    <description>Recent content in JPA on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 Jan 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://programya.com/tags/JPA/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JPA JPQL</title>
      <link>http://programya.com/post/Spring/Spring-Data/JPQL/</link>
      <pubDate>Sun, 27 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Spring/Spring-Data/JPQL/</guid>
      <description>JPQL 语言，即 Java Persistence Query Language 是一种和 SQL 非常相似的中间性和对象查询语言，其最终会被编译成针对于不同底层数据库的 SQL 查询，从而屏蔽掉不同数据库的差异。JPQL 的语句都是通过 Query 接口封装执行的。 Query 接口主要有以下几个方法： int executeUpdate(); 执行 Update 或者 Delete 语句。 List getResultList(); 执行 Select 语句并返回结果实体列表。 Object getSingleResult(); 用于执行只返回单个结</description>
    </item>
    
    <item>
      <title>JPA 映射关系</title>
      <link>http://programya.com/post/Spring/Spring-Data/JPA-%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Sat, 26 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Spring/Spring-Data/JPA-%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</guid>
      <description>对于一对多的情况使用一个 Department 类和一个 Student 类。 单向多对一 在多的一端（Student）维护数据，则需要在多的一端设置如下的注解： 1 2 3 4 5 6 7 8 9 10 11 12 private Department department; // 设置多对一，且设置懒加载 @ManyToOne(fetch = FetchType.LAZY) // 设置 Mapping 列的名称 @JoinColumn(name = &amp;#34;department_id&amp;#34;) public Department getDepartment() { return department; } public void setDepartment(Department department) { this.department = department; } 在插入的时候最好先插入一的一端，再插入多的一</description>
    </item>
    
    <item>
      <title>JPA 基本注解</title>
      <link>http://programya.com/post/Spring/Spring-Data/JPA-%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Fri, 25 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Spring/Spring-Data/JPA-%E5%9F%BA%E6%9C%AC%E6%B3%A8%E8%A7%A3/</guid>
      <description>JDBC 是 Sun公司提供了一套访问数据库的接口规范，数据库厂商必须遵守Sun公司的规范，提供访问自己数据库服务器API即驱动；JDBC只是一些接口，需要数据库厂商提供相应的实现类即驱动，如果没有驱动无法连接数据库，更无法操作数据库。 JPA 即 Java Persistence API，用于对象持久化的 API 是一个规范，Java</description>
    </item>
    
    <item>
      <title>JPA EntityManager</title>
      <link>http://programya.com/post/Spring/Spring-Data/JPA-EntityManager/</link>
      <pubDate>Thu, 24 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Spring/Spring-Data/JPA-EntityManager/</guid>
      <description>一个简单的使用 JPA 插入数据的过程如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // 根据 persistence-unit 的信息创建 EntityManagerFactory EntityManagerFactory factory = Persistence.createEntityManagerFactory(&amp;#34;NewPersistenceUnit&amp;#34;); // 使用 EntityManagerFactory 创建 EntityManager EntityManager manager = factory.createEntityManager(); // 使用 EntityTransaction 创建 EntityTransaction EntityTransaction transaction = manager.getTransaction(); // 开启事务 transaction.begin(); // 准备要插入的数据 Book book = new Book(); book.setName(&amp;#34;Test Book&amp;#34;); book.setPrice(12.5d); // 使用 EntityManager 持久化对象 manager.persist(book); // 提交事务 transaction.commit(); // 关闭 EntityManager 和 EntityManagerFactory manager.close(); factory.close(); EntityManagerFactory EntityManagerFactory 接口主要用来创建 EntityManager 实例</description>
    </item>
    
  </channel>
</rss>