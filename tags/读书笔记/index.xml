<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on 新月的博客</title>
    <link>https://programya.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 12 Jan 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://programya.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式 摘录</title>
      <link>https://programya.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%91%98%E5%BD%95/</link>
      <pubDate>Sat, 12 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%91%98%E5%BD%95/</guid>
      <description>创建型模式 工厂模式 抽象工厂模式 单例模式 建造者模式 原型模式 结构型模式 适配器模式 桥接模式 过滤器模式 组合模式 装饰器模式 外观模式 享元模式 代理模式 行为型模式 责任链模式 命令模式 解释器模式 迭代器模式 中介者模式 备忘录模式 观察者模式 状态模式 空对象模式 策略模式 模板模式 访问者模式 J2EE 模式 MVC 模式 业务代表模</description>
    </item>
    
    <item>
      <title>敏捷开发的六个原则</title>
      <link>https://programya.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%9A%84%E5%85%AD%E4%B8%AA%E5%8E%9F%E5%88%99/</link>
      <pubDate>Fri, 11 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%9A%84%E5%85%AD%E4%B8%AA%E5%8E%9F%E5%88%99/</guid>
      <description>单一职责原则（SRP） 一个类只做一件事。就一个类而言，应该仅有一个引起它变化的原因。职责就是变化的原因，如果你多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。 开放 - 闭合原则（OCP） 软件实体（类，模块，函数等等）应该可以扩展的，但是不可修改的。如果程序的一处改动就会产</description>
    </item>
    
    <item>
      <title>《代码整洁之道》读书笔记</title>
      <link>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 10 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>有意义的命名 名副其实 一个好的变量、函数或类的名字应该已经答复了所以的大问题。该告诉你为什么存在？做什么事情？应该怎样使用？ 避免误导 避免使用与本意相悖的词。例如 accountList 除非这真的是存放一组账号的 List 否则不应该使用 List 这样对程序员有特殊意义的词。 另外避免使用很长且名称相近或区别很小的名称。 做有</description>
    </item>
    
    <item>
      <title>读书笔记</title>
      <link>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 08 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>《清单革命》 清单五个原则： 权利下方 系统中各层级的权力和义务更加明确，运转效率更高。 简单至上 清单应该是简单，可测，高效。清单目的是为了简单，而不是让事情变得复杂。 激活团队 清单的制定需要提高团队的凝聚力和潜能，清单系统让整个团队迅速集结，团队成员各自发挥最大的价值，即使互相不熟悉，也</description>
    </item>
    
    <item>
      <title>关于变量命名</title>
      <link>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/</link>
      <pubDate>Mon, 07 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D/</guid>
      <description>关键思想是把信息封装到名字中，清晰准确比装可爱好。 选择专业的词 例如 getPage(url) 中的 get 这个词没能表达更多的信息，无法体现具体是何处得到页面的。如果是从互联网中获取的，则使用更专业的 fetchPage 或者 downloadPage 则更为合适。 另外例如有一个 Thread 类，如下： 1 2 3 class Thread{ void stop(); } 这里的 stop 方法显然可以针对不同的作用更改为更加合适的</description>
    </item>
    
    <item>
      <title>《重构》读书笔记</title>
      <link>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%87%8D%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 06 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%87%8D%E6%9E%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>**为何重构：**重构改进软件设计，重构使软件更容易理解，重构找到Bug， 重构提高编程速度。良好的设计师快速开发的根本。 何时重构： 事不过三，三则重构 添加功能时重构 修补错误时重构 复查代码时重构 代码的坏味道 重复代码 同一个类中有两段相同的表达式：抽取方法，提炼出重复代码。 互为兄弟的子类</description>
    </item>
    
    <item>
      <title>《编写可读代码的艺术》读书笔记</title>
      <link>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 05 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>可读性基本定理，关键思想是代码的写法应当使别人理解它需要的时间最小化。其中的 理解 表示其他人能够改动它，找出缺陷并明白它如何与其他部分代码交互的。 审美 让源代码看上去养眼的三条原则： 使用一致的布局，让读者很快就习惯这种风格 让相似的代码看上去相思 把相关的代码分组，形成代码块 重新安排换行</description>
    </item>
    
  </channel>
</rss>