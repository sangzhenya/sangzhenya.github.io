<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dubbo on 新月的博客</title>
    <link>https://sangzhenya.github.io/tags/Dubbo/</link>
    <description>Recent content in Dubbo on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Feb 2020 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://sangzhenya.github.io/tags/Dubbo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dubbo 原理</title>
      <link>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 07 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%8E%9F%E7%90%86/</guid>
      <description>参考：Dubbo 开发者指南 Dubbo 整体框架设计如下： 图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。 主要包含 config 层，proxy 服务代理层，registry 注册中心层，cluster 路由层，monitor 监控层，proto</description>
    </item>
    
    <item>
      <title>Dubbo 基本配置</title>
      <link>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 03 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>参考地址：Dubbo 配置 启动时检查 Dubbo 默认情况下在启动的时候会检查依赖的服务是否可用，如果不可用的时候则抛出异常阻止 Spring 初始化的完成。如果是测试或者有循环依赖则需要关闭启动时检查，配置如下： 1 2 3 // # 关闭某个服务的启动时没有提供者的 Check @Reference(check = false) ArticleService articleService; # 关闭所有服务的启动时没有提供者的 Check dubbo.consumer.check=false dubbo.reference.check=false</description>
    </item>
    
    <item>
      <title>Dubbo 基本概念和环境搭建</title>
      <link>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 01 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>参考： Dubbo 快速入门 常规的垂直应用架构已无法应对网站应用规模的不断扩大，互联网应用架构大致的演进过程如下： 大致的演进历程也就是： 单一应用架构 -&amp;gt; 垂直应用架构 -&amp;gt; 分布式服务架构 -&amp;gt; 流式计算架构。 在流式计算架构中有一个调度中心基于访问压力实时管理集群容量，提高集群利用率。 Dubbo 是一款高性能Java</description>
    </item>
    
  </channel>
</rss>