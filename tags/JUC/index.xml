<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUC on 新月的博客</title>
    <link>https://sangzhenya.github.io/tags/JUC/</link>
    <description>Recent content in JUC on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 02 Jan 2019 10:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://sangzhenya.github.io/tags/JUC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java ConcurrentHashMap</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-ConcurrentHashMap/</link>
      <pubDate>Wed, 02 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-ConcurrentHashMap/</guid>
      <description>JDK 8 中 ConcurrentHashMap 为什么放弃分段锁 在 Java 8 中 ConcurrentHashMap 放弃了分段锁而是使用 synchronized 加 CAS 的来实现并发控制的。一方面是 JVM 对 synchronized 已经进行了大量的优化措施，例如锁粗化，锁消除，自适应自旋锁，偏向锁等等。另一方面使用分段锁浪费内存空间，且 map 放入时竞争同一个锁的概率很小，分段锁反而可能造成更新操作长时间等待，同时为了提</description>
    </item>
    
    <item>
      <title>Java CAS</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-CAS/</link>
      <pubDate>Wed, 02 Jan 2019 09:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-CAS/</guid>
      <description>CAS ( Compare And Swap ) 比较并交换，是一条 CPU 并发原语。其作用是判断内存某个位置的值是否为预期值，如果是则更改为新值，这个过程是原子的。 CAS CAS 并发原语体现在 Java 预言中就是 sun.misc.Unsafe 类中各个方法。调用 Unsafe 类中的 CAS 方法， JVM 会帮我们实现出 CAS 汇编指令。这是一种依赖于硬件的功能，通过它实现了原子操作。由于 CAS 是一种传统</description>
    </item>
    
    <item>
      <title>Java volatile</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-volatile/</link>
      <pubDate>Wed, 02 Jan 2019 08:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-volatile/</guid>
      <description>JMM JVM: Java 虚拟机 JMM: Java 内存模型 Java 内存模型 Java Memory Model 本身是一种抽象的概念并不真实存在，它描述的是一组规则或规范，通过这组规范定义了程序中的各个变量（包括实例字段、静态字段和构成数组对象元素）的访问方式。 JMM 关于同步的规定： 线程解锁前，必须把共享变量的值刷回主内存 线程加锁前，必须读取主内存到自己</description>
    </item>
    
    <item>
      <title>Java ReentrantLock</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-ReentrantLock/</link>
      <pubDate>Tue, 01 Jan 2019 23:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-ReentrantLock/</guid>
      <description>ReentrantLock 重入锁，即支持重复进入的锁，该锁能够支持一个线程对一个资源反复的加锁。实现可重入锁需要解决两个问题： 线程再次获取锁。锁需要识别获取锁的线程是否是当前占用锁的线程，如果是则成功获取。 锁的最终释放。线程重复多次获取锁，那么需要在相同次数释放该锁后，其他线程能更获取到该锁。加锁时计数</description>
    </item>
    
    <item>
      <title>Java 并发控制</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 01 Jan 2019 22:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid>
      <description>锁 公平锁和非公平锁 并发包中 ReentrantLock 的创建可以指定构造函数的 boolean 类型来得到公平锁赫尔非公平锁，默认是非公平锁。 二者区别 **公平锁：**Thread acquire a fair lock in the order in which they request it. 公平锁：在并发环境中，每个线程在获取锁时先查看此锁维护的等待队列，如果为空，或者当前线程是等待队列的第一个就占用锁，否则</description>
    </item>
    
    <item>
      <title>Java AQS</title>
      <link>https://sangzhenya.github.io/post/Java/juc/Java-AQS/</link>
      <pubDate>Tue, 01 Jan 2019 21:00:00 +0800</pubDate>
      
      <guid>https://sangzhenya.github.io/post/Java/juc/Java-AQS/</guid>
      <description>众所周知 synchronized 是重量级锁，虽然在 JDK 1.6 后使用了轻量级锁，偏向锁，自适应自旋锁，锁粗化，锁消除等手段去去优化，但是其基于 JVM 的隐式获取和释放锁的方式导致缺少了获取锁和释放锁的可操作性。如果需要高效的实现锁并操作获取和释放锁的过程则需要使用显式锁 Lock，而其中 JUC 包下的 AQS 类是很多锁组件的基础</description>
    </item>
    
  </channel>
</rss>