<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Netty on 新月的博客</title>
    <link>http://programya.com/categories/Netty/</link>
    <description>Recent content in Netty on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 07 Apr 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://programya.com/categories/Netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty Java IO 模型</title>
      <link>http://programya.com/post/Others/Netty/Netty-Java-IO-%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 07 Apr 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-Java-IO-%E6%A8%A1%E5%9E%8B/</guid>
      <description>Java 模型简单的理解就是使用什么样的通道惊醒数据的发送和接收，这很大程度上决定了程序通讯的性能。Java 支持 3 种网络编程模型 IO：BIO，NIO，AIO。 BIO 是同步阻塞模型，服务器实现模式为一个连接对应一个线程，即客户端有请求的时候服务端就需要启动一个线程进行处理，如果这个连接不作任何</description>
    </item>
    
    <item>
      <title>Netty EventLoop</title>
      <link>http://programya.com/post/Others/Netty/Netty-EventLoop/</link>
      <pubDate>Fri, 05 Apr 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-EventLoop/</guid>
      <description>NioEventLoop 的继承关系图如下： 首先看一下 SingleThreadEventLoop 类的 execute 方法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 public void execute(Runnable task) { ObjectUtil.checkNotNull(task, &amp;#34;task&amp;#34;); execute(task, !(task instanceof LazyRunnable) &amp;amp;&amp;amp; wakesUpForTask(task)); } private void execute(Runnable task, boolean immediate) { boolean inEventLoop = inEventLoop(); // 将 task 添加到队列中 addTask(task); if (!inEventLoop) { // 如果该 EventLoop 线程不是当前线程则尝试启动线程 startThread(); if (isShutdown()) { boolean reject = false; try { // 如果启动失败，从 task 队列中移除</description>
    </item>
    
    <item>
      <title>Netty 主要组件</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 03 Apr 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E4%B8%BB%E8%A6%81%E7%BB%84%E4%BB%B6/</guid>
      <description>Netty 的主要组件有 Channel， EventLoop，ChannelFuture，ChannelHandler，ChannelPipeline 等。 ChannelHandler 其中 ChannelHandler 是处理出入站数据的业务逻辑容器。例如通过实现 ChannelInboundHandler 接口，就可以接收入站事件和数据。当要给客户端端发送响应的时候，也可以从 ChannelInboundHandler 中写数据。业</description>
    </item>
    
    <item>
      <title>Netty 心跳机制</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 01 Apr 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6/</guid>
      <description>Netty 提供了一个重要的服务心跳机制 heartbeat。通过心跳检查对方是否有效，这是 RPC 框架中必不可少的功能。接下来分析相关源码的实现。 Netty 提供了 IdleStateHandler, ReadTimeoutHandler, WriteTimeoutHandler 三个 Handler 检测连接的有效性。 IdleStateHandler：当连接的空闲时间（读/写）太长时，将会触发一个 IdleStateEvent 事件，然后可以通过 ChannelInboundHandler 中重写 userEventTrigged 方</description>
    </item>
    
    <item>
      <title>Netty 异步线程池</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 27 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E5%BC%82%E6%AD%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>在 Netty 中做耗时的，不可预料的操作，比如数据库，网络请求，会严重影响 Netty 对 Socket 的处理速度。解决方案则是将任务添加到异步线程池中，主要有两种方式： handler 中加入线程池 context 中加入线程池 Handler 中加入线程池 在 Handler 中添加一个 EventExecutorGroup，需要创建线程的时候使用 group.submit 创建线程，整个流程则变成如</description>
    </item>
    
    <item>
      <title>Netty 三大组件</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 25 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>ChannelPipeline, ChannelHandler 和 ChannelHandlerContext 三者的关系是每当 ServerSocket 创建一个新的连接，就会创建一个 Socket 对应的就是目标客户端。每一个新创建的 Socket 都将会分配一个全新的 ChannelPipeline。每个 ChannelPipeline 包含多个 ChannelHandlerContext，其是一个双向链表，包装了通过 addLast 方法添加的 ChannelHandler。 ChannelSocket 和</description>
    </item>
    
    <item>
      <title>Netty 入门</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 23 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E5%85%A5%E9%97%A8/</guid>
      <description>Netty 是由 JBOSS 提供的一个 Java 开源框架，现在是 GitHub 上的独立项目。其是一个异步的，基于事件驱动的网络应用框架，也来快速开发高性能，高可用的网络 IO 程序。主要针对在 TCP 协议下，面向 Clients 端的高并发应用，或者在 P2P 场景下的大量数据持续传输的应用。本质上还是一个 NIO 框架，适用于服务器通讯相关的多种应用场景。 在分</description>
    </item>
    
    <item>
      <title>Netty 源码</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E5%90%AF%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%BA%90%E7%A0%81/</link>
      <pubDate>Thu, 21 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E5%90%AF%E5%8A%A8%E6%B3%A8%E5%86%8C%E6%BA%90%E7%A0%81/</guid>
      <description>一个 Server 端的 Sample Code 如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public final class EchoServer { static final boolean SSL = System.getProperty(&amp;#34;ssl&amp;#34;) != null; static final int PORT = Integer.parseInt(System.getProperty(&amp;#34;port&amp;#34;, &amp;#34;8007&amp;#34;)); public static void main(String[] args) throws Exception { // 配置 SSL 的信息 final SslContext sslCtx; if (SSL) { SelfSignedCertificate ssc = new SelfSignedCertificate(); sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build(); } else { sslCtx = null; } // 配置 Server 的信息 EventLoopGroup bossGroup = new NioEventLoopGroup(1); EventLoopGroup workerGroup = new NioEventLoopGroup(); final EchoServerHandler serverHandler = new EchoServerHandler();</description>
    </item>
    
    <item>
      <title>Netty 核心</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E6%A0%B8%E5%BF%83/</link>
      <pubDate>Tue, 19 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E6%A0%B8%E5%BF%83/</guid>
      <description>Bootstrap 和 ServerBootstrap Bootstrap 即导引，一个 Netty 应用通常由一个 Boostrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中的 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。常用方法如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // 服务端用来设置两个 Event Group public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup); // 客户端用来设置一个</description>
    </item>
    
    <item>
      <title>Netty 线程模型</title>
      <link>http://programya.com/post/Others/Netty/Netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 17 Mar 2019 09:00:00 +0800</pubDate>
      
      <guid>http://programya.com/post/Others/Netty/Netty-%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>目前主要存在两种线程模型：传统阻塞 IO 服务模型和 Reactor 模式。其中 Reactor 模式根据处理资源池线程的数量不同有三种典型的实现： 单 Reactor 单线程 单 Reactor 多线程 主从 Reactor 多线程 Netty 是根据主从 Reactor 多线程模型做了一点的改进，其中的主从Reactor 多线程模型有多个 Reactor。 传统阻塞 IO 服务模型 黄色表示对象，蓝色表示线</description>
    </item>
    
  </channel>
</rss>