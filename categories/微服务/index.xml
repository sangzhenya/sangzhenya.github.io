<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on 新月的博客</title>
    <link>https://programya.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Feb 2020 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://programya.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dubbo 原理</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 07 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%8E%9F%E7%90%86/</guid>
      <description>参考：Dubbo 开发者指南 Dubbo 整体框架设计如下： 图中左边淡蓝背景的为服务消费方使用的接口，右边淡绿色背景的为服务提供方使用的接口，位于中轴线上的为双方都用到的接口。 主要包含 config 层，proxy 服务代理层，registry 注册中心层，cluster 路由层，monitor 监控层，proto</description>
    </item>
    
    <item>
      <title>Dubbo 基本配置</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 03 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>参考地址：Dubbo 配置 启动时检查 Dubbo 默认情况下在启动的时候会检查依赖的服务是否可用，如果不可用的时候则抛出异常阻止 Spring 初始化的完成。如果是测试或者有循环依赖则需要关闭启动时检查，配置如下： 1 2 3 // # 关闭某个服务的启动时没有提供者的 Check @Reference(check = false) ArticleService articleService; # 关闭所有服务的启动时没有提供者的 Check dubbo.consumer.check=false dubbo.reference.check=false</description>
    </item>
    
    <item>
      <title>Dubbo 基本概念和环境搭建</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 01 Feb 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/dubbo/Dubbo-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>参考： Dubbo 快速入门 常规的垂直应用架构已无法应对网站应用规模的不断扩大，互联网应用架构大致的演进过程如下： 大致的演进历程也就是： 单一应用架构 -&amp;gt; 垂直应用架构 -&amp;gt; 分布式服务架构 -&amp;gt; 流式计算架构。 在流式计算架构中有一个调度中心基于访问压力实时管理集群容量，提高集群利用率。 Dubbo 是一款高性能Java</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/K8S/K8S/</link>
      <pubDate>Sat, 25 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/K8S/K8S/</guid>
      <description>K8S 是一个工业级的容器编排平台。主要有以下一些特点：轻量级，消耗资源少；弹性伸缩；负载均衡。 K8S 是基于 Borg 开发的，Borg 的架构如如下图所示： 首先是 BorgMaster 为了防止单点故障一般情况下都是以集群的形式出现，而且通常应该设置三个以上的奇数个 BorgMaster。Scheduler 调度器，有任务的</description>
    </item>
    
    <item>
      <title>Kafka 使用</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/kafka/Kafka-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 21 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/kafka/Kafka-%E4%BD%BF%E7%94%A8/</guid>
      <description>发送 Kafka 的 Producer 发送消息时采用异步发送的方式，在消息的发送过程中，涉及到了两个线程， main 线程和 sender 线程，以及一个线程共享变量 RecordAccumulator main 线程将消息发送给 RecordAccumulator Sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka Broker 上。如下图所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // 一个简单的 Producer public class MyPartitionerProducer { static Logger logger = LoggerFactory.getLogger(MyPartitionerProducer.class); public</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/kafka/Kafka/</link>
      <pubDate>Fri, 17 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/kafka/Kafka/</guid>
      <description>kafka 是一个分布式的记于订阅发布模式的消息队列，主要应用于大数据实时处理领域。 消息队列好处：解耦，可恢复性，缓冲，灵活性与峰值处理能力，异步通讯。 消息队列有两种模式：点对点模式即一对一，发布订阅模式即一对多。 Kafka 基础架构 如下图所示： 上图中主要组成有以下几部分： Producer： 消息生产</description>
    </item>
    
    <item>
      <title>Zookeeper 使用</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/zookeeper/Zookeeper-%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 14 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/zookeeper/Zookeeper-%E4%BD%BF%E7%94%A8/</guid>
      <description>Java 连接使用 Zookeeper 的样例 pom 依赖如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.12.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-jupiter-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.5.2&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 简单的增加节点/获取节点/判断节点是否存在的操作。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class MyZookeeper { private static Logger logger = LoggerFactory.getLogger(MyZookeeper.class); private static final String CONNECT_STRING = &amp;#34;192.168.29.128:2181,192.168.29.129:2181,192.168.29.130:2181&amp;#34;; private static final int SESSION_TIMEOUT = 2000; private static ZooKeeper zooKeeper; public static void main(String[] args) throws</description>
    </item>
    
    <item>
      <title>Zookeeper</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/zookeeper/Zookeeper/</link>
      <pubDate>Tue, 07 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/zookeeper/Zookeeper/</guid>
      <description>Zookeeper 从设计模式角度来看是一个机遇观察者模式的设计的分布式服务管理框架，负责存储和管理需要关心的数据，接受观察者注册，一旦观察的数据状态发生变化，Zookeeper 将负责将通知已经在 Zookeeper 上注册的那些观察者做出相应的反应。Zookeeper 结构图如下： Zookeeper 特点： 一个领导者和多个跟随着组成的</description>
    </item>
    
    <item>
      <title>微服务简介</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 05 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%AE%80%E4%BB%8B/</guid>
      <description>微服务，通常而言微服务架构是一种架构模式或说是一种架构风格，其倡导将单一应用程序划分成一组小的服务，每个服务运行在其独立的自己的进程中，服务之间相互协调相互配合，为用户提供最终价值。服务之间采用轻量级的通讯机制相同通讯。每个服务围绕着具体业务进行构建，并且能够被独立的部署到生产环</description>
    </item>
    
    <item>
      <title>ACID 原则 与 CAP 原则</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/CAP-%E5%8E%9F%E5%88%99-/</link>
      <pubDate>Fri, 03 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/CAP-%E5%8E%9F%E5%88%99-/</guid>
      <description>ACID 原则 A (Atomicity) 原子性 原子性即事务里的所有操作要么全部做完，要么都不做。事务成功的条件就是事务里所有操作都成功，任意一个事务失败，则整个事务就是失败，需要回滚。 C (Consistency) 一致性 一致性即数据库要一直处于一致状态，事务的运行不会改变数据库原本的一致性约束。 I (Isolation) 独立性 独立性即并发的事务之间不会相互</description>
    </item>
    
    <item>
      <title>Docker 入门</title>
      <link>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker/</link>
      <pubDate>Wed, 01 Jan 2020 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Docker/</guid>
      <description>基本概念 Docker 镜像是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建多个容器。仓库是存放镜像文件的地方，仓库注册服务器上存放着多个仓库。 镜像可以类比为 Java 的类，而容器可以类比为对象。 Docker 工作原理 Docker 是一个 Client-Server 结构的系统，Docker 守护进程运行在主机上，然后通过 Socket 连接客户端访问，守护</description>
    </item>
    
  </channel>
</rss>