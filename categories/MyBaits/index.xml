<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyBaits on 新月的博客</title>
    <link>https://programya.com/categories/MyBaits/</link>
    <description>Recent content in MyBaits on 新月的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 15 May 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://programya.com/categories/MyBaits/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MyBatis SQL 映射</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBatis-SQL-%E6%98%A0%E5%B0%84/</link>
      <pubDate>Wed, 15 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBatis-SQL-%E6%98%A0%E5%B0%84/</guid>
      <description>一个包含增删改查的 MyBatis Mapper 文件如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;mapper namespace=&amp;#34;com.xinyue.imybatis.mapper.UserMapper&amp;#34;&amp;gt; &amp;lt;select id=&amp;#34;getUserById&amp;#34; resultType=&amp;#34;User&amp;#34; databaseId=&amp;#34;mysql&amp;#34;&amp;gt; select id, name, password, first_name firstName, last_name lastName from user where id = #{id} &amp;lt;/select&amp;gt; &amp;lt;insert id=&amp;#34;createUser&amp;#34; parameterType=&amp;#34;User&amp;#34;&amp;gt; insert into user (name, password, first_name, last_name) values (#{name}, #{password}, #{firstName}, #{lastName}) &amp;lt;/insert&amp;gt; &amp;lt;update id=&amp;#34;updateUser&amp;#34;&amp;gt; update user set name = #{name}, password=#{password}, first_name=#{firstName} where id=#{id} &amp;lt;/update&amp;gt; &amp;lt;delete id=&amp;#34;deleteUser&amp;#34;&amp;gt; delete from user where id = #{id} &amp;lt;/delete&amp;gt; &amp;lt;/mapper&amp;gt; 一个简单的测试样例如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 @Test public void testCreate() { try {</description>
    </item>
    
    <item>
      <title>MyBatis 自定义 TypeHandler</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E8%87%AA%E5%AE%9A%E4%B9%89-TypeHandler/</link>
      <pubDate>Mon, 13 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E8%87%AA%E5%AE%9A%E4%B9%89-TypeHandler/</guid>
      <description>MyBaits 支持通过自定义的 TypeHandler 的形式来设置参数或从结果中取出数据集的时候的封装策略。主要有以下几步： 实现 TypeHanlder结果或者继承 BaseTypeHandler 使用 @MappedTypes 定义处理的 Java 类型，使用 @MapJdbcTypes 定义 jdbc type 类型 在参数处理或自定义结果集处理的时候标明使用自定义的 TypeHandler 处理。也可以在全局配置 TypeHandler 要处理的 javaType 定义一个枚举类放到 User 上</description>
    </item>
    
    <item>
      <title>MyBatis 运行原理</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 11 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</guid>
      <description>MyBaits 分层结构图 MyBatis 过程整个过程有以下四步： 创建 SqlSessionFactory 获取 SqlSession 获取代理对象 执行方法 获取 SqlSessionFactory 1 2 3 4 5 6 public SqlSessionFactory getSqlSessionFactory() throws IOException { // 获取配置的文件流 InputStream inputStream = Resources.getResourceAsStream(&amp;#34;mybatis-config.xml&amp;#34;); // 根据配置使用 SqlSessionFactoryBuilder 生成 SqlSessionFactory return new SqlSessionFactoryBuilder().build(inputStream); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // SqlSessionFactoryBuilder public SqlSessionFactory build(InputStream inputStream) { // 调用内部的 build 方法 return build(inputStream, null, null); } public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) { try { // 根据配置</description>
    </item>
    
    <item>
      <title>MyBatis 配置文件</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Thu, 09 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>MyBaits 是一个半自动化的持久化层框架，支持定制化 SQL，存储过程以及高级映射。避免 JDBC 代码和手动设置参数以及获取结果集。其使用简单的 XML 或注解用于配置和原始映射，将接口和 Java 的对象映射成数据库记录。 一个简单的项目配置如下： pom.xml 配置如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &amp;lt;dependencies&amp;gt; &amp;lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.3&amp;lt;/version&amp;gt;</description>
    </item>
    
    <item>
      <title>MyBatis 缓存</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 07 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E7%BC%93%E5%AD%98/</guid>
      <description>MyBatis 具有非常强大的缓存特性，可以方便的配置和定制。其默认定义了两级缓存：分布是一集缓存和二级缓存。 一级缓存：又称本地缓存。作用域为 sqlSession, 当 Session flush 或 close 之后，该 Session 中的所有 Cache 将被清空。其默认情况一级缓存开启，而且不能关闭，不过可以通过调用 clearCache 来清空本地缓存可以通过设置 localCacheScope 来修改缓存的作用域，有 SESSION |</description>
    </item>
    
    <item>
      <title>MyBatis 动态 SQL</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E5%8A%A8%E6%80%81-SQL/</link>
      <pubDate>Sun, 05 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E5%8A%A8%E6%80%81-SQL/</guid>
      <description>使用 MyBatis 可以很轻松的完成动态 SQL 的拼写。 一个简单的使用 if 拼接的查询方法如下： 1 2 3 4 5 6 7 8 9 &amp;lt;!-- List&amp;lt;User&amp;gt; queryUser(@Param(&amp;#34;id&amp;#34;) Integer id, @Param(&amp;#34;name&amp;#34;) String name, @Param(&amp;#34;firstName&amp;#34;) String firstName, @Param(&amp;#34;lastName&amp;#34;) String lastName); --&amp;gt; &amp;lt;select id=&amp;#34;queryUser&amp;#34; resultType=&amp;#34;User&amp;#34; databaseId=&amp;#34;mysql&amp;#34;&amp;gt; select * from user where 1 = 1 &amp;lt;if test=&amp;#34;id != null&amp;#34;&amp;gt;and id = #{id} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;name != null and name.trim() != &amp;#39;&amp;#39;&amp;#34;&amp;gt;and name = #{name} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;firstName != null and firstName != &amp;#39;&amp;#39;&amp;#34;&amp;gt;and first_name = #{firstName} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;lastName != null and lastName != &amp;#39;&amp;#39;&amp;#34;&amp;gt;and last_name = #{lastName} &amp;lt;/if&amp;gt; &amp;lt;/select&amp;gt; 当然也可以使用 where 标签去省略掉 where 关键字： 1 2 3 4</description>
    </item>
    
    <item>
      <title>MyBaits 插件</title>
      <link>https://programya.com/post/DataBase/MyBatis/MyBaits-%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Fri, 03 May 2019 09:00:00 +0800</pubDate>
      
      <guid>https://programya.com/post/DataBase/MyBatis/MyBaits-%E6%8F%92%E4%BB%B6/</guid>
      <description>MyBatis 在创建四个主要对象（Executor， ParameterHandler, ResultSetHandler, StatementHandler）的过程中都会使用到插件。插件可以利用动态代理机制一层层的包装目标对象从而实现在目标对象执行目标方法之前进行拦截。 一个简单的插件编写如下： 首先编写实现 Interceptor 的主类： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description>
    </item>
    
  </channel>
</rss>